<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Hire Talent - Partnerdesk</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <script src="https://unpkg.com/scrollreveal"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    html {
      scroll-behavior: smooth;
    }
    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      line-height: 1.6;
      background-color: #1c1c2e; /* Darker background, slightly different from learning */
      color: #e0e0eb; /* Light text for dark background */
      overflow-x: hidden; /* Prevent horizontal scroll */
      transition: background-color 0.3s ease; /* Smooth background transition */
    }

    body.no-scroll {
      overflow: hidden; /* Prevent body scroll when nav is open */
    }

    /* Custom styles for the logo and site title - consistent with other pages */
    .logo-title-container {
      position: fixed;
      top: 0;
      left: 0;
      padding: 1.5rem 2rem;
      z-index: 1001;
      display: flex;
      align-items: center;
      background: linear-gradient(to right, rgba(0,0,0,0.8), rgba(0,0,0,0)); /* Gradient for subtle effect */
      width: 300px; /* Adjust width as needed */
    }

    .logo-title-container .logo {
      width: 90px; /* Increased logo size to match other pages */
      height: 90px; /* Increased logo size to match other pages */
      margin-right: 1rem;
      border-radius: 8px; /* Rounded corners for logo */
      object-fit: cover; /* Ensure logo covers the area */
    }

    .logo-title-container .site-title {
      font-size: 1.8rem; /* Big Partnerdesk */
      font-weight: 700;
      color: #ffffff;
      letter-spacing: -0.05em;
    }

    /* Navigation Bar - consistent with other pages */
    nav {
      position: fixed;
      top: 0;
      right: 0; /* Align to right */
      height: 100vh; /* Full height */
      width: 250px; /* Reduced width */
      background: rgba(0, 0, 0, 0.8); /* Semi-transparent dark background */
      backdrop-filter: blur(10px); /* Frosted glass effect */
      color: white;
      padding: 2rem 1rem;
      z-index: 1000;
      display: flex;
      flex-direction: column; /* Stack links vertically */
      justify-content: center; /* Center links vertically */
      box-shadow: -5px 0 15px rgba(0,0,0,0.3); /* Shadow on the left side */
      transition: transform 0.3s ease-in-out; /* Smooth transition for responsiveness */
      transform: translateX(100%); /* Hidden by default */
    }

    nav.active {
      transform: translateX(0%); /* Show when active */
    }

    nav a {
      color: #ffffff;
      text-decoration: none;
      font-weight: 600;
      padding: 0.8rem 1.5rem;
      margin: 0.5rem 0;
      border-radius: 8px; /* Rounded corners */
      transition: background-color 0.3s, color 0.3s, transform 0.2s;
      text-align: right; /* Align text to the right */
    }

    nav a:hover {
      background-color: rgba(255, 255, 255, 0.1);
      color: #FFD700; /* Accent color: Gold for freelancing */
      transform: translateX(-5px); /* Slight hover effect */
    }

    /* Hamburger menu - consistent with other pages */
    .hamburger-menu {
      display: flex; /* Always visible */
      position: fixed;
      top: 1.5rem;
      right: 1.5rem;
      z-index: 1002;
      cursor: pointer;
      flex-direction: column;
      justify-content: space-around;
      width: 30px;
      height: 25px;
      transition: all 0.3s ease-in-out;
    }

    .hamburger-menu .bar {
      width: 100%;
      height: 3px;
      background-color: white;
      border-radius: 2px;
      transition: all 0.3s ease-in-out;
    }

    /* Overlay for when nav is open - consistent with other pages */
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5); /* Semi-transparent black */
      z-index: 999; /* Below nav, above content */
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
    }

    .overlay.active {
      opacity: 1;
      visibility: visible;
    }

    /* Page Header Section - New Freelancing Gradient (Professional Blue/Gold) */
    .page-header {
      background: linear-gradient(to bottom right, #2C3E50, #34495E, #FFD700); /* Dark Blue to Gold */
      color: white;
      padding: 8rem 1rem 4rem; /* Adjusted padding for sub-pages */
      text-align: center;
      position: relative;
      overflow: hidden;
      border-bottom-left-radius: 50px;
      border-bottom-right-radius: 50px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.5);
    }

    .page-header h1 {
      font-size: 3rem; /* Slightly smaller for sub-pages */
      margin: 0 0 1rem;
      font-weight: 700;
      letter-spacing: -0.08em;
      text-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }

    .page-header p {
      font-size: 1.2rem;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
      opacity: 0.9;
    }

    /* Section Styling */
    .section {
      padding: 5rem 1.5rem; /* Increased padding */
      max-width: 1200px;
      margin: auto;
      text-align: center;
    }

    .section h2 {
      font-size: 2.5rem; /* Larger section titles */
      margin-bottom: 2.5rem;
      font-weight: 700;
      color: #e0e0eb; /* Light text for dark background */
      text-shadow: 0 2px 10px rgba(0,0,0,0.3);
    }

    /* Filter Section Styles */
    .filter-section {
      background-color: #2a2a4a;
      padding: 2.5rem;
      border-radius: 20px;
      margin-bottom: 4rem;
      box-shadow: 0 8px 25px rgba(0,0,0,0.4);
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      align-items: center;
    }

    .filter-section .filter-group {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      width: 100%;
    }

    /* Combined styles for all input fields, selects, and textareas */
    .filter-section input[type="text"],
    .filter-section select,
    .filter-section input[type="email"],
    .filter-section input[type="password"],
    .admin-panel input[type="text"],
    .admin-panel select,
    .admin-panel textarea {
      background-color: #2a2a4a !important; /* Dark background, forced */
      border: 1px solid #5a5a7a;
      padding: 0.8rem 1.2rem;
      border-radius: 10px;
      color: #ffffff !important; /* Light text, forced */
      font-size: 1rem;
      box-sizing: border-box;
      width: 100%;
      max-width: 300px; /* Limit width on larger screens */
    }

    /* Combined styles for all input and textarea placeholders */
    .filter-section input[type="text"]::placeholder,
    .filter-section input[type="email"]::placeholder,
    .filter-section input[type="password"]::placeholder,
    .admin-panel input[type="text"]::placeholder,
    .admin-panel textarea::placeholder {
      color: #A0A0B5 !important; /* Slightly darker light grey placeholder, forced */
    }

    /* Ensure select options are visible */
    .filter-section select option,
    .admin-panel select option {
        background-color: #3e3e5a; /* Dark background for options */
        color: #E0E0EB; /* Light text for options */
    }

    .filter-section button {
      background-color: #FFD700; /* Gold button */
      color: #1c1c2e;
      padding: 0.8rem 2rem;
      border-radius: 30px;
      font-weight: 600;
      transition: background-color 0.3s, transform 0.2s;
      box-shadow: 0 3px 10px rgba(0,0,0,0.2);
    }

    .filter-section button:hover {
      background-color: #FFC107;
      transform: translateY(-2px);
    }

    /* Freelancer Profiles Grid - Now a stacked layout of horizontal cards */
    .freelancer-grid {
      display: flex; /* Use flexbox for stacking */
      flex-direction: column; /* Stack vertically */
      gap: 3.5rem; /* Increased gap between cards */
      margin-top: 3rem;
      align-items: center; /* Center cards horizontally */
    }

    /* Freelancer Card - Redesigned for prominent horizontal display */
    .freelancer-card {
      background-color: #2a2a4a;
      border-radius: 20px;
      padding: 2.5rem;
      box-shadow: 0 8px 30px rgba(0,0,0,0.4);
      transition: transform 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
      border: 1px solid rgba(255, 255, 255, 0.15);
      text-align: left; /* Align content to left within the card */
      display: flex; /* Make it a flex container */
      flex-direction: row; /* Arrange items horizontally */
      align-items: center; /* Vertically align items in the center */
      gap: 2rem; /* Space between image and text content */
      width: 100%; /* Take full width of its container */
      max-width: 900px; /* Max width for large screens */
      cursor: grab; /* Indicate draggable */
    }

    .freelancer-card:hover {
      transform: translateY(-10px) scale(1.01);
      box-shadow: 0 15px 40px rgba(0,0,0,0.5);
    }

    .freelancer-card.dragging {
        opacity: 0.5;
        border: 2px dashed #FFD700;
    }

    .freelancer-card img {
      width: 150px; /* Larger image size for horizontal layout */
      height: 150px;
      border-radius: 50%;
      object-fit: cover;
      margin-bottom: 0; /* Remove bottom margin */
      flex-shrink: 0; /* Prevent image from shrinking */
      border: 4px solid #FFD700; /* Gold border for profile pic */
      box-shadow: 0 0 15px rgba(255,215,0,0.4);
    }

    .freelancer-card .content-wrapper {
        flex-grow: 1; /* Allow content to take remaining space */
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .freelancer-card h3 {
      font-size: 2rem;
      font-weight: 700;
      color: #FFD700; /* Gold for names */
      margin-bottom: 0.8rem;
    }

    .freelancer-card .skills {
      font-size: 1rem;
      color: #a0a0b5;
      margin-bottom: 1rem;
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start; /* Align skills to the left */
      gap: 0.5rem;
    }

    .freelancer-card .skill-tag {
      background-color: #3e3e5a;
      color: #FFD700;
      padding: 0.4rem 0.8rem;
      border-radius: 8px;
      font-size: 0.9rem;
    }

    .freelancer-card p {
      font-size: 1.1rem;
      color: #c0c0d0;
      margin-bottom: 1.5rem;
      flex-grow: 1; /* Allow description to take space */
    }

    .freelancer-card .button-group {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-top: auto; /* Push buttons to bottom */
        justify-content: flex-start; /* Align buttons to the left */
    }

    .freelancer-card .contact-button {
      background-color: #4299E1; /* Blue for contact button */
      color: white;
      padding: 0.8rem 1.8rem;
      border-radius: 30px;
      font-weight: 600;
      transition: background-color 0.3s, transform 0.2s;
      text-decoration: none;
    }

    .freelancer-card .contact-button:hover {
      background-color: #3182CE;
      transform: translateY(-2px);
    }

    /* Admin Panel Styles */
    .admin-panel-container .admin-panel {
      background-color: #3e3e5a;
      padding: 2.5rem;
      border-radius: 20px;
      margin-top: 4rem;
      box-shadow: 0 8px 25px rgba(0,0,0,0.4);
      text-align: left;
    }

    .admin-panel-container .admin-panel h2 {
      color: #FFD700;
      margin-bottom: 1.5rem;
    }

    .admin-panel-container .input-group {
      margin-bottom: 1rem;
    }

    .admin-panel-container label {
      display: block;
      margin-bottom: 0.5rem;
      color: #e0e0eb;
      font-weight: 600;
    }

    /* Style for file input button */
    .admin-panel-container input[type="file"] {
        display: block;
        width: 100%;
        padding: 0.8rem 1.2rem;
        background-color: #2a2a4a;
        border: 1px solid #5a5a7a;
        border-radius: 10px;
        color: #ffffff;
        cursor: pointer;
    }

    .admin-panel-container input[type="file"]::-webkit-file-upload-button {
        visibility: hidden;
        width: 0;
        padding: 0;
        margin: 0;
    }
    .admin-panel-container input[type="file"]::before {
        content: 'Choose File';
        display: inline-block;
        background: #FFD700; /* Gold for file input button */
        color: #1c1c2e; /* Dark text on gold */
        border: none;
        border-radius: 20px;
        padding: 0.5rem 1.5rem;
        outline: none;
        white-space: nowrap;
        -webkit-user-select: none;
        cursor: pointer;
        font-weight: 600;
        font-size: 0.9rem;
        transition: background-color 0.3s;
    }
    .admin-panel-container input[type="file"]:hover::before {
        background-color: #FFC107;
    }

    .admin-panel-container button {
      background-color: #4CAF50; /* Green for add button */
      color: white;
      padding: 0.8rem 2rem;
      border-radius: 30px;
      font-weight: 600;
      transition: background-color 0.3s, transform 0.2s;
      box-shadow: 0 3px 10px rgba(0,0,0,0.2);
      margin-top: 1.5rem;
      margin-right: 1rem; /* Added margin for multiple buttons */
    }

    .admin-panel-container button:hover {
      background-color: #388E3C;
      transform: translateY(-2px);
    }

    .admin-panel-container .admin-message {
      background-color: #2a2a4a;
      border-left: 4px solid #FFD700;
      padding: 1rem;
      margin-top: 2rem;
      border-radius: 8px;
      color: #e0e0eb;
      font-size: 0.95rem;
    }

    /* Edit and Delete buttons for freelancer profiles */
    .freelancer-card .edit-button,
    .freelancer-card .delete-button {
      display: none; /* Hidden by default */
      padding: 0.6rem 1.2rem;
      border-radius: 20px;
      font-weight: 600;
      transition: background-color 0.3s, transform 0.2s;
      box-shadow: 0 3px 10px rgba(0,0,0,0.2);
      margin: 0.5rem; /* Space between buttons */
    }

    /* Show edit/delete buttons when admin is logged in */
    .freelancer-card.admin-mode .edit-button,
    .freelancer-card.admin-mode .delete-button {
      display: inline-block;
    }

    /* Logout Admin button */
    .admin-panel-container .logout-admin-button {
      margin-top: 4rem; /* Adjust spacing as needed */
      background-color: #DC2626; /* Red color for logout */
      color: white;
      padding: 0.8rem 2rem;
      border-radius: 30px;
      font-weight: 600;
      transition: background-color 0.3s, transform 0.2s;
      box-shadow: 0 3px 10px rgba(0,0,0,0.2);
      display: block; /* Always block when present */
    }

    .admin-panel-container .logout-admin-button:hover {
      background-color: #B91C1C;
      transform: translateY(-2px);
    }

    /* Save Order button for freelancers */
    .admin-panel-container .save-order-button {
        background-color: #00BCD4; /* Cyan color for save order */
        color: white;
        padding: 0.8rem 2rem;
        border-radius: 30px;
        font-weight: 600;
        transition: background-color 0.3s, transform 0.2s;
        box-shadow: 0 3px 10px rgba(0,0,0,0.2);
        margin-top: 2rem;
        display: block; /* Always block when present */
        width: fit-content;
        margin-left: auto;
        margin-right: auto;
    }

    .admin-panel-container .save-order-button:hover {
        background-color: #00ACC1;
        transform: translateY(-2px);
    }

    /* Custom Modal/Message Box Styles */
    .custom-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
    }
    .custom-modal-overlay.active {
        opacity: 1;
        visibility: visible;
    }
    .custom-modal-content {
        background: #2D3748;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        max-width: 400px;
        width: 90%;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);
        color: #E2E8F0;
        transform: translateY(-20px);
        opacity: 0;
        transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
    }
    .custom-modal-overlay.active .custom-modal-content {
        transform: translateY(0);
        opacity: 1;
    }
    .custom-modal-content p {
        font-size: 1.1rem;
        margin-bottom: 20px;
    }
    .custom-modal-content button {
        background-color: #FFD700; /* Default button color for this page */
        color: #1c1c2e;
        padding: 10px 20px;
        border-radius: 20px;
        margin: 0 5px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }
    .custom-modal-content button:hover {
        transform: translateY(-2px);
    }
    .custom-modal-content .confirm-button {
        background-color: #EF4444; /* Red for confirm delete */
        color: white; /* Ensure white text on red */
    }
    .custom-modal-content .confirm-button:hover {
        background-color: #C53030;
    }
    .custom-modal-content .cancel-button {
        background-color: #5a5a7a; /* Gray for cancel */
        color: white; /* Ensure white text on gray */
    }
    .custom-modal-content .cancel-button:hover {
        background-color: #4a4a5a;
    }

    /* Footer Styles */
    footer {
      text-align: center;
      padding: 3rem;
      background: #0a0a0a; /* Very dark footer */
      font-size: 0.9rem;
      color: #888888;
      border-top-left-radius: 30px; /* Rounded top corners */
      border-top-right-radius: 30px;
      border-top: none;
    }

    footer p {
      margin-bottom: 0.5rem; /* Spacing for footer lines */
    }

    /* Ensure dynamic spans in footer appear on new lines */
    footer p span {
      display: block; /* Make spans take full width, forcing new line */
      margin-top: 0.2rem; /* Small margin for visual separation */
    }

    /* Responsive adjustments */
    @media (max-width: 1024px) {
      .logo-title-container {
        width: auto;
        background: rgba(0,0,0,0.8);
        box-shadow: 0 2px 10px rgba(0,0,0,0.5);
        border-bottom-right-radius: 15px;
      }
      nav {
        width: 300px;
      }
      .freelancer-card {
        flex-direction: column; /* Stack vertically on smaller screens */
        text-align: center;
        gap: 1rem;
      }
      .freelancer-card img {
        margin-bottom: 1.5rem;
      }
      .freelancer-card .skills {
        justify-content: center; /* Center skills on smaller screens */
      }
      .freelancer-card .button-group {
        justify-content: center; /* Center buttons on smaller screens */
      }
    }

    @media (max-width: 768px) {
      .logo-title-container {
        padding: 1rem 1.5rem;
      }
      .logo-title-container .site-title {
        font-size: 1.5rem;
      }
      .logo-title-container .logo {
        width: 50px;
        height: 50px;
      }
      nav {
        width: 100%;
        padding-top: 5rem;
      }
      .page-header {
        padding: 6rem 1rem 3rem;
      }
      .page-header h1 {
        font-size: 2rem;
      }
      .page-header p {
        font-size: 1rem;
      }
      .section {
        padding: 3rem 1rem;
      }
      .filter-section {
        padding: 1.5rem;
      }
      .filter-section input[type="text"],
      .filter-section select {
        max-width: none; /* Allow full width on small screens */
      }
      .freelancer-card {
        padding: 1.5rem;
      }
      .freelancer-card h3 {
        font-size: 1.5rem;
      }
      .freelancer-grid {
        grid-template-columns: 1fr; /* Stack on small screens */
      }
      /* Admin panel container always shown on small screens but its content is dynamic */
      .admin-panel-container {
        padding: 1.5rem;
      }
    }
  </style>
</head>
<body>

  <!-- Custom Message Box/Modal HTML -->
  <div id="customMessageModal" class="custom-modal-overlay">
    <div class="custom-modal-content">
      <p id="customMessageText"></p>
      <button id="customMessageCloseButton">OK</button>
    </div>
  </div>

  <div id="customConfirmModal" class="custom-modal-overlay">
    <div class="custom-modal-content">
      <p id="customConfirmText"></p>
      <button id="customConfirmYesButton" class="confirm-button">Yes</button>
      <button id="customConfirmNoButton" class="cancel-button">No</button>
    </div>
  </div>

  <!-- Logo and Site Title - Consistent with other pages -->
  <div class="logo-title-container">
    <img src="logo.png" alt="Partnerdesk Logo" class="logo">
    <span class="site-title">Partnerdesk</span>
  </div>

  <!-- Hamburger Menu - Consistent with other pages -->
  <div class="hamburger-menu" onclick="window.toggleNav()">
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
  </div>

  <!-- Navigation Overlay - Consistent with other pages -->
  <div class="overlay" onclick="window.toggleNav()"></div>

  <!-- Navigation Bar - Consistent with other pages -->
  <nav id="main-nav">
    <a href="index.html" onclick="window.toggleNav()">Home</a>
    <a href="internships.html" onclick="window.toggleNav()">Internships</a>
    <a href="learning.html" onclick="window.toggleNav()">Learning</a>
    <a href="freelancing.html" onclick="window.toggleNav()">Freelancing</a>
    <a href="partners.html" onclick="window.toggleNav()">Partners</a>
    <a href="about.html" onclick="window.toggleNav()">About</a>
    <a href="contact.html" onclick="window.toggleNav()">Contact</a>
    <div class="nav-divider my-4 h-px bg-gray-700"></div>
    <a href="verify.html" onclick="window.toggleNav()">Authenticate Your Certificate</a>
    <a href="downloads.html" onclick="window.toggleNav()">Downloads</a> <!-- New Downloads tab -->
    <a href="admin_login.html" id="adminLoginLink" class="hidden" onclick="window.toggleNav()">Admin Login</a> <!-- New Admin Login link -->
  </nav>

  <!-- Page Header Section -->
  <header class="page-header">
    <h1>Find Your Perfect Talent</h1>
    <p>Browse our curated list of skilled freelancers, primarily Partnerdesk alumni, ready to elevate your projects.</p>
  </header>

  <!-- Introduction Section -->
  <section class="section">
    <p class="text-xl max-w-3xl mx-auto text-center text-gray-300">
      Our freelancers are highly trained individuals, many of whom have completed rigorous internships with Partnerdesk, ensuring a high standard of quality and professionalism.
    </p>
  </section>

  <!-- Filter Section -->
  <section class="section">
    <h2>Filter Freelancers</h2>
    <div class="filter-section">
      <div class="filter-group">
        <input type="text" id="skillSearch" placeholder="Search by skill (e.g., Digital Marketing)">
        <select id="domainFilter">
          <option value="">All Domains</option>
          <!-- Options will be dynamically loaded here by JavaScript -->
        </select>
      </div>
      <button onclick="window.applyFilters()">Apply Filters</button>
    </div>
  </section>

  <!-- Freelancer Profiles Section -->
  <section class="section">
    <h2>Our Talented Freelancers</h2>
    <div class="loading-indicator text-center text-blue-400" id="loadingIndicator">Loading freelancers...</div>
    <div class="freelancer-grid" id="freelancerList">
      <!-- Freelancer Cards will be loaded dynamically from Firestore here -->
    </div>
    <p id="noResultsMessage" class="text-xl text-gray-400 mt-10 hidden">No freelancers found matching your criteria.</p>
  </section>

  <!-- Container for Admin Panel (will be populated by JS) -->
  <div id="adminPanelContainer" class="section"></div>

  <!-- Footer - Restored to original structure -->
  <footer>
    <p>&copy; 2025 Partnerdesk. All Rights Reserved.</p>
    <p>Partnerdesk is a registered MSME under the Government of India.</p>
    <p>Registration No. : <span id="footerMsmeRegNo">UDYAM-UP-03-0104523</span></p>
    <p>Registered Office : <span id="footerAddress">9/8, George Town, Prayagraj, Uttar Pradesh, Pin–211001</span></p>
    <p>Email: <span id="footerEmail">info@partnerdesk.in</span></p>
    <p>Phone: <span id="footerPhone">+91-XXXXXXXXXX</span></p>
  </footer>

  <script type="module">
    // Firebase SDK imports
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, collection, addDoc, onSnapshot, query, doc, deleteDoc, updateDoc, writeBatch } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    // IMPORTANT: Replace this with your actual Firebase config object
    const firebaseConfig = {
          apiKey: "AIzaSyAiEhapkQvQnOtxZCQFa6TbOEWg3yelS8c",
          authDomain: "certificates-b42ef.firebaseapp.com",
          projectId: "certificates-b42ef",
          storageBucket: "certificates-b42ef.firebasestorage.app",
          messagingSenderId: "317230336893",
          appId: "1:317230336893:web:915181dc11ed7264255a14",
      // measurementId: "YOUR_MEASUREMENT_ID" // Optional
    };

    // --- Cloudinary Configuration ---
    // YOU MUST REPLACE THESE WITH YOUR OWN CLOUDINARY CREDENTIALS
    const CLOUDINARY_CLOUD_NAME = 'dy15lyntn'; // e.g., 'my-awesome-cloud'
    const CLOUDINARY_UPLOAD_PRESET = 'partnerdesk_talent_uploads'; // e.g., 'partnerdesk_talent_uploads'
    // --------------------------------

    // Use your projectId as the appId for consistency with Firestore paths
    const currentAppId = firebaseConfig.projectId;

    let app;
    let db;
    let auth;
    let currentUserId; // To store the authenticated user's ID
    let draggedItem = null; // For drag and drop functionality

    // Initialize Firebase and set up auth listener immediately
    app = initializeApp(firebaseConfig);
    db = getFirestore(app);
    auth = getAuth(app);

    // Expose app, db, and auth globally for console access and admin functions
    window.app = app;
    window.db = db;
    window.auth = auth;
    window.firebaseConfig = firebaseConfig; // Also expose config if needed

    // Log the App ID being used at startup
    console.log("App ID being used (from firebaseConfig.projectId):", currentAppId);

    // --- Custom Modal/Message Box Functions (consistent with other pages) ---
    function showMessage(message, type = 'info') {
        const modal = document.getElementById('customMessageModal');
        const messageText = document.getElementById('customMessageText');
        const closeButton = document.getElementById('customMessageCloseButton');

        if (!modal || !messageText || !closeButton) {
            console.error("Custom message modal elements not found. Falling back to alert.");
            alert(message);
            return;
        }

        messageText.textContent = message;
        modal.classList.add('active');
        closeButton.onclick = () => modal.classList.remove('active');
    }

    function showConfirm(message) {
        return new Promise(resolve => {
            const modal = document.getElementById('customConfirmModal');
            const confirmText = document.getElementById('customConfirmText');
            const yesButton = document.getElementById('customConfirmYesButton');
            const noButton = document.getElementById('customConfirmNoButton');

            if (!modal || !confirmText || !yesButton || !noButton) {
                console.error("Custom confirm modal elements not found. Falling back to confirm.");
                resolve(confirm(message));
                return;
            }

            confirmText.textContent = message;
            modal.classList.add('active');

            const cleanup = () => {
                modal.classList.remove('active');
                yesButton.onclick = null;
                noButton.onclick = null;
            };

            yesButton.onclick = () => {
                cleanup();
                resolve(true);
            };
            noButton.onclick = () => {
                cleanup();
                resolve(false);
            };
        });
    }
    // ---------------------------------------------------------------------------

    // --- Cloudinary Image Upload Function ---
    window.handleImageUpload = async function(event) {
        const file = event.target.files[0];
        console.log("handleImageUpload: File selected:", file);

        if (!file) {
            console.log("handleImageUpload: No file selected.");
            return;
        }

        if (!CLOUDINARY_CLOUD_NAME || CLOUDINARY_CLOUD_NAME === 'YOUR_CLOUDINARY_CLOUD_NAME_FOR_TALENT' ||
            !CLOUDINARY_UPLOAD_PRESET || CLOUDINARY_UPLOAD_PRESET === 'YOUR_CLOUDINARY_UPLOAD_PRESET_NAME_FOR_TALENT') {
            showMessage("Cloudinary not configured. Please set CLOUDINARY_CLOUD_NAME and CLOUDINARY_UPLOAD_PRESET for talent in the code.", 'error');
            return;
        }

        const imageUploadLoading = document.getElementById('imageUploadLoading');
        imageUploadLoading.style.display = 'block'; // Show loading indicator
        document.getElementById('freelancerImageUrl').value = ''; // Clear existing URL

        const formData = new FormData();
        formData.append('file', file);
        formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);

        try {
            const response = await fetch(`https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error("Cloudinary upload failed:", errorData);
                throw new Error(errorData.error ? errorData.error.message : 'Unknown Cloudinary error');
            }

            const data = await response.json();
            const downloadURL = data.secure_url; // Use secure_url for HTTPS

            document.getElementById('freelancerImageUrl').value = downloadURL;
            imageUploadLoading.textContent = 'Upload complete!';
            imageUploadLoading.style.color = '#4CAF50'; // Green for success
            console.log('File available at', downloadURL);
            setTimeout(() => {
                imageUploadLoading.style.display = 'none'; // Hide after a delay
                imageUploadLoading.style.color = '#FFD700'; // Reset color to gold accent
            }, 3000);

        } catch (error) {
            console.error("Image upload failed:", error);
            imageUploadLoading.textContent = `Upload failed: ${error.message}`;
            imageUploadLoading.style.color = '#EF4444'; // Red for error
            showMessage(`Image upload failed: ${error.message}`, 'error');
        }
    }
    // -------------------------------------------------------------------

    // Function to render the admin panel dynamically
    function renderAdminPanel() {
      const adminPanelContainer = document.getElementById('adminPanelContainer');
      if (!adminPanelContainer) {
        console.error("Admin panel container not found!");
        return;
      }

      adminPanelContainer.innerHTML = `
        <h2 class="text-3xl font-bold mb-4 text-white">Manage Freelancer Profiles</h2>
        <div class="admin-panel">
          <p class="admin-message">
            <strong>Note:</strong> Changes made here will be saved directly to the database and will persist.
          </p>

          <input type="hidden" id="currentFreelancerId">

          <div class="input-group">
            <label for="freelancerName">Name:</label>
            <input type="text" id="freelancerName" placeholder="e.g., Jane Doe">
          </div>
          <div class="input-group">
            <label for="freelancerSkill">Skill (comma-separated):</label>
            <input type="text" id="freelancerSkill" placeholder="e.g., Digital Marketing, Web Development">
          </div>
          <div class="input-group">
            <label for="freelancerDescription">Description:</label>
            <textarea id="freelancerDescription" placeholder="A brief description of the freelancer's expertise."></textarea>
          </div>
          <div class="input-group">
            <label for="freelancerImageUrl">Image URL (or upload below):</label>
            <input type="text" id="freelancerImageUrl" placeholder="e.g., https://res.cloudinary.com/your-cloud/profile.png">
          </div>
          <div class="input-group">
            <label for="freelancerImageUpload">Upload Profile Image to Cloudinary:</label>
            <input type="file" id="freelancerImageUpload" accept="image/*">
            <div id="imageUploadLoading" class="image-upload-loading">Uploading...</div>
          </div>
          <div class="input-group">
            <label for="freelancerContactEmail">Contact Email:</label>
            <input type="text" id="freelancerContactEmail" placeholder="e.g., jane.doe@example.com">
          </div>
          <div class="input-group">
            <label for="freelancerDomain">Primary Domain:</label>
            <select id="freelancerDomain">
              <option value="">Select Domain</option>
              <!-- Options will be dynamically loaded here by JavaScript -->
            </select>
          </div>

          <button id="saveFreelancerButton">Add New Freelancer</button>
          <button id="clearFormButton" class="bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition duration-200">Clear Form</button>
        </div>

        <button id="saveOrderButton" class="save-order-button hidden">Save Freelancer Order</button>
        <button id="logoutAdminButton" class="logout-admin-button">Logout Admin</button>
      `;

      // Attach event listeners after elements are created
      document.getElementById('saveFreelancerButton').onclick = window.addOrUpdateFreelancerProfile;
      document.getElementById('clearFormButton').onclick = window.clearFreelancerForm;
      document.getElementById('logoutAdminButton').onclick = window.adminLogout;
      document.getElementById('saveOrderButton').onclick = window.saveFreelancerOrder;
      document.getElementById('freelancerImageUpload').addEventListener('change', window.handleImageUpload); // Attach image upload listener

      // Load domains after rendering admin panel
      window.loadDomains();
    }

    // Listen for authentication state changes
    onAuthStateChanged(auth, (user) => {
      const adminPanelContainer = document.getElementById('adminPanelContainer');
      const adminLoginLink = document.getElementById('adminLoginLink');

      if (user) {
        currentUserId = user.uid;
        console.log("onAuthStateChanged: User is authenticated. UID:", currentUserId);
        renderAdminPanel();
        // Add admin-mode class to all freelancer cards so edit/delete buttons show
        document.querySelectorAll('.freelancer-card').forEach(card => {
          card.classList.add('admin-mode');
        });
        if (adminLoginLink) {
          adminLoginLink.classList.add('hidden'); // Hide Admin Login link if logged in
        }
      } else {
        currentUserId = null;
        console.log("onAuthStateChanged: No user authenticated.");
        if (adminPanelContainer) {
          adminPanelContainer.innerHTML = ''; // Clear admin panel if not logged in
        }
        // Remove admin-mode class from all freelancer cards
        document.querySelectorAll('.freelancer-card').forEach(card => {
          card.classList.remove('admin-mode');
        });
        if (adminLoginLink) {
          adminLoginLink.classList.remove('hidden'); // Show Admin Login link if not logged in
        }
      }
      // Always load freelancer profiles after auth state is determined
      window.loadFreelancerProfiles();
      loadContactInfoIntoFooter(); // Load footer info after auth state is known
    });

    // Function to render freelancer profile cards
    window.renderFreelancerProfiles = function(profiles) {
      const profilesList = document.getElementById('freelancerList');
      profilesList.innerHTML = ''; // Clear existing cards
      const noProfilesMessage = document.getElementById('noResultsMessage');
      document.getElementById('loadingIndicator').classList.add('hidden'); // Hide loading

      if (profiles.length === 0) {
        noProfilesMessage.classList.remove('hidden');
      } else {
        noProfilesMessage.classList.add('hidden');
        profiles.forEach(profile => {
          const skillsArray = profile.skill ? profile.skill.split(',').map(s => `<span class="skill-tag">${s.trim()}</span>`).join('\n') : '';
          const cardHtml = `
            <div class="freelancer-card ${currentUserId ? 'admin-mode' : ''}" id="freelancer-${profile.id}"
                 data-id="${profile.id}"
                 data-skills="${profile.skill ? profile.skill.toLowerCase() : ''}"
                 data-domain="${profile.domain ? profile.domain.toLowerCase() : ''}"
                 draggable="${currentUserId ? 'true' : 'false'}"> <!-- Draggable only if admin -->
              <img src="${profile.imageUrl || 'https://placehold.co/150x150/FFD700/1C1C2E?text=JD'}" alt="${profile.name}" onerror="this.onerror=null;this.src='https://placehold.co/150x150/FFD700/1C1C2E?text=JD';">
              <div class="content-wrapper">
                <h3>${profile.name || 'Untitled Freelancer'}</h3>
                <div class="skills">${skillsArray}</div>
                <p>${profile.description || 'No description available.'}</p>
                <div class="button-group">
                  <a href="mailto:${profile.contactEmail || '#'}" class="contact-button">Contact ${profile.name ? profile.name.split(' ')[0] : 'Freelancer'}</a>
                  <button class="edit-button bg-blue-500 hover:bg-blue-600" onclick="window.editFreelancerProfile('${profile.id}')">Edit</button>
                  <button class="delete-button bg-red-500 hover:bg-red-600" onclick="window.deleteFreelancerProfile('${profile.id}')">Delete</button>
                </div>
              </div>
            </div>
          `;
          profilesList.insertAdjacentHTML('beforeend', cardHtml);
        });

        // Add drag and drop event listeners after rendering
        if (currentUserId) {
            addDragAndDropListeners();
        }
      }
      window.applyFilters(); // Apply filters after rendering
    }

    // Function to load freelancer profiles from Firestore in real-time
    window.loadFreelancerProfiles = function() {
      if (!db) {
        console.error("loadFreelancerProfiles: Firestore not initialized. Cannot load data.");
        document.getElementById('loadingIndicator').textContent = "Error: Database not ready.";
        return;
      }
      const collectionPath = `artifacts/${currentAppId}/public/data/freelancers`;
      console.log("loadFreelancerProfiles: Attempting to load profiles from path:", collectionPath);

      document.getElementById('loadingIndicator').classList.remove('hidden'); // Show loading

      // Fetch all documents and sort client-side
      onSnapshot(collection(db, collectionPath), (snapshot) => {
        document.getElementById('loadingIndicator').classList.add('hidden'); // Hide loading
        let profiles = [];
        snapshot.forEach(doc => {
          profiles.push({ id: doc.id, ...doc.data() });
        });

        // Client-side sorting by 'order' then 'name'
        profiles.sort((a, b) => {
            if (a.order === undefined && b.order === undefined) {
                return a.name.localeCompare(b.name);
            }
            if (a.order === undefined) return 1; // Put undefined orders at the end
            if (b.order === undefined) return -1; // Put undefined orders at the end
            if (a.order === b.order) {
                return a.name.localeCompare(b.name);
            }
            return a.order - b.order;
        });

        window.renderFreelancerProfiles(profiles);
      }, (error) => {
        console.error("Error fetching freelancer profiles: ", error);
        document.getElementById('loadingIndicator').textContent = `Error loading profiles: ${error.message}`;
        showMessage(`Error loading freelancer profiles: ${error.message}`, 'error');
      });
    }

    // Function to add or update a freelancer profile
    window.addOrUpdateFreelancerProfile = async function() {
      if (!db || !auth.currentUser) {
        showMessage("Error: Not authenticated. Please log in as admin.", 'error');
        return;
      }

      const freelancerId = document.getElementById('currentFreelancerId').value;
      const name = document.getElementById('freelancerName').value.trim();
      const skill = document.getElementById('freelancerSkill').value.trim();
      const description = document.getElementById('freelancerDescription').value.trim();
      let imageUrl = document.getElementById('freelancerImageUrl').value.trim();
      const contactEmail = document.getElementById('freelancerContactEmail').value.trim();
      const domain = document.getElementById('freelancerDomain').value.trim();

      if (!name || !skill || !description || !contactEmail || !domain) {
        showMessage('Please fill in all required fields to add/update a freelancer profile.', 'error');
        return;
      }

      // Default image if none provided
      if (!imageUrl) {
        const initials = name.split(' ').map(n => n[0]).join('').toUpperCase();
        const randomColor = Math.floor(Math.random()*16777215).toString(16);
        imageUrl = `https://placehold.co/150x150/${randomColor}/FFFFFF?text=${initials}`;
      }

      const profileData = {
        name: name,
        skill: skill,
        description: description,
        imageUrl: imageUrl,
        contactEmail: contactEmail,
        domain: domain,
        lastUpdated: new Date().toISOString(),
        updatedBy: auth.currentUser.uid
      };

      try {
        if (freelancerId) {
          const profileDocRef = doc(db, `artifacts/${currentAppId}/public/data/freelancers`, freelancerId);
          await updateDoc(profileDocRef, profileData);
          console.log("Document successfully updated with ID: ", freelancerId);
          showMessage('Freelancer profile updated successfully!', 'success');
        } else {
          // For new freelancers, assign an 'order' based on current timestamp
          profileData.order = Date.now();
          const docRef = await addDoc(collection(db, `artifacts/${currentAppId}/public/data/freelancers`), profileData);
          console.log("Document written with ID: ", docRef.id);
          showMessage('Freelancer profile added successfully!', 'success');
        }
        window.clearFreelancerForm();
      } catch (e) {
        console.error("Error adding/updating document: ", e);
        showMessage(`Error: ${e.message}`, 'error');
      }
    }

    // Function to populate form for editing
    window.editFreelancerProfile = function(docId) {
      const freelancerToEdit = document.getElementById(`freelancer-${docId}`);

      if (freelancerToEdit) {
        document.getElementById('currentFreelancerId').value = docId;
        document.getElementById('freelancerName').value = freelancerToEdit.querySelector('h3').textContent;
        // Extract skills, format for input from the skill-tag spans
        const skillTags = freelancerToEdit.querySelectorAll('.skill-tag');
        const skillsText = Array.from(skillTags).map(tag => tag.textContent.trim()).join(', ');
        document.getElementById('freelancerSkill').value = skillsText;

        document.getElementById('freelancerDescription').value = freelancerToEdit.querySelector('p').textContent;
        document.getElementById('freelancerImageUrl').value = freelancerToEdit.querySelector('img').src;
        // Extract email from mailto link
        const contactLink = freelancerToEdit.querySelector('.contact-button').href;
        const emailMatch = contactLink.match(/^mailto:(.*)$/);
        document.getElementById('freelancerContactEmail').value = emailMatch ? emailMatch[1] : '';

        // Get domain from data attribute
        document.getElementById('freelancerDomain').value = freelancerToEdit.getAttribute('data-domain');

        document.getElementById('saveFreelancerButton').textContent = 'Update Freelancer';
        window.scrollTo({ top: document.getElementById('adminPanelContainer').offsetTop, behavior: 'smooth' });
      } else {
        console.error("Freelancer not found for editing:", docId);
        showMessage("Freelancer not found for editing.", 'error');
      }
    }

    // Function to clear the admin form
    window.clearFreelancerForm = function() {
      document.getElementById('currentFreelancerId').value = '';
      document.getElementById('freelancerName').value = '';
      document.getElementById('freelancerSkill').value = '';
      document.getElementById('freelancerDescription').value = '';
      document.getElementById('freelancerImageUrl').value = '';
      document.getElementById('freelancerContactEmail').value = '';
      document.getElementById('freelancerDomain').value = '';
      document.getElementById('saveFreelancerButton').textContent = 'Add New Freelancer';
      document.getElementById('imageUploadLoading').style.display = 'none'; // Hide upload message
      document.getElementById('imageUploadLoading').textContent = 'Uploading...'; // Reset message
      document.getElementById('imageUploadLoading').style.color = '#FFD700'; // Reset color
      document.getElementById('freelancerImageUpload').value = ''; // Clear file input
    }

    // Function to delete a freelancer profile
    window.deleteFreelancerProfile = async function(docId) {
      console.log("Attempting to delete freelancer profile with ID:", docId);

      if (!db || !auth.currentUser) {
        showMessage("Error: Not authenticated. Please log in as admin.", 'error');
        return;
      }

      const confirmDelete = await showConfirm("Are you sure you want to delete this freelancer profile? This action cannot be undone.");
      
      if (!confirmDelete) {
        console.log("Deletion cancelled by user.");
        return;
      }

      try {
        const freelancerDocRef = doc(db, `artifacts/${currentAppId}/public/data/freelancers`, docId);
        await deleteDoc(freelancerDocRef);
        console.log("Document successfully deleted with ID:", docId);
        showMessage("Freelancer profile deleted successfully!", 'success');
      }
      catch (e) {
        console.error("Error removing document:", e);
        showMessage(`Error deleting profile: ${e.message}`, 'error');
      }
    };

    // Domain Management Functions (only loading, no add/edit/delete on this page)
    window.loadDomains = function() {
        if (!db) {
            console.error("loadDomains: Firestore not initialized. Cannot load data.");
            return;
        }
        // Fetch domains from the shared collection used by freelancing.html
        // CORRECTED PATH: Fetching from 'services' collection as per user's instruction
        const collectionPath = `artifacts/${currentAppId}/public/data/services`;
        console.log("loadDomains: Attempting to load domains from path:", collectionPath);

        onSnapshot(collection(db, collectionPath), (snapshot) => {
            const domains = [];
            snapshot.forEach(doc => {
                domains.push({ id: doc.id, ...doc.data() });
            });
            window.populateDomainDropdowns(domains);
        }, (error) => {
            console.error("Error fetching domains: ", error);
            showMessage(`Error loading domains: ${error.message}`, 'error');
        });
    }

    window.populateDomainDropdowns = function(domains) {
        const domainFilterSelect = document.getElementById('domainFilter');
        const freelancerDomainSelect = document.getElementById('freelancerDomain');

        // Clear existing options, keep "All Domains" for filter
        domainFilterSelect.innerHTML = '<option value="">All Domains</option>';
        freelancerDomainSelect.innerHTML = '<option value="">Select Domain</option>';

        domains.forEach(domain => {
            const optionFilter = document.createElement('option');
            // Assuming 'name' field exists in 'services' documents for the domain name
            optionFilter.value = domain.name ? domain.name.toLowerCase().replace(/\s+/g, '-') : '';
            optionFilter.textContent = domain.name || 'Unnamed Domain';
            domainFilterSelect.appendChild(optionFilter);

            const optionFreelancer = document.createElement('option');
            optionFreelancer.value = domain.name ? domain.name.toLowerCase().replace(/\s+/g, '-') : '';
            optionFreelancer.textContent = domain.name || 'Unnamed Domain';
            freelancerDomainSelect.appendChild(optionFreelancer);
        });
    }

    // Drag and Drop Functions
    function addDragAndDropListeners() {
        const freelancerList = document.getElementById('freelancerList');
        const saveOrderButton = document.getElementById('saveOrderButton');

        if (!freelancerList) return;

        freelancerList.addEventListener('dragstart', (e) => {
            if (e.target.classList.contains('freelancer-card')) {
                draggedItem = e.target;
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', draggedItem.innerHTML); // Set data for drag
                setTimeout(() => {
                    draggedItem.classList.add('dragging');
                }, 0);
            }
        });

        freelancerList.addEventListener('dragover', (e) => {
            e.preventDefault(); // Necessary to allow drop
            if (e.target.classList.contains('freelancer-card') && e.target !== draggedItem) {
                const boundingBox = e.target.getBoundingClientRect();
                const offset = e.clientY - boundingBox.top;
                const center = boundingBox.height / 2;

                const currentContainer = draggedItem.parentNode;
                const targetCard = e.target;

                if (offset > center) {
                    currentContainer.insertBefore(draggedItem, targetCard.nextSibling);
                } else {
                    currentContainer.insertBefore(draggedItem, targetCard);
                }
            }
        });

        freelancerList.addEventListener('dragend', () => {
            if (draggedItem) {
                draggedItem.classList.remove('dragging');
                draggedItem = null;
                // Show save order button if admin is logged in
                if (currentUserId && saveOrderButton) {
                    saveOrderButton.classList.remove('hidden');
                }
            }
        });
    }

    window.saveFreelancerOrder = async function() {
        if (!db || !auth.currentUser) {
            showMessage("Error: Not authenticated. Please log in as admin.", 'error');
            return;
        }

        const freelancerCards = document.querySelectorAll('.freelancer-card');
        const batch = writeBatch(db);

        freelancerCards.forEach((card, index) => {
            const freelancerId = card.dataset.id;
            const freelancerDocRef = doc(db, `artifacts/${currentAppId}/public/data/freelancers`, freelancerId);
            batch.update(freelancerDocRef, { order: index }); // Assign new order
        });

        try {
            await batch.commit();
            showMessage('Freelancer order saved successfully!', 'success');
            document.getElementById('saveOrderButton').classList.add('hidden'); // Hide button after saving
        } catch (e) {
            console.error("Error saving freelancer order: ", e);
            showMessage(`Error saving order: ${e.message}`, 'error');
        }
    }


    // Client-side filtering logic
    window.applyFilters = function() {
      const skillSearchInput = document.getElementById('skillSearch').value.toLowerCase();
      const domainFilter = document.getElementById('domainFilter').value.toLowerCase();
      const freelancerCards = document.querySelectorAll('.freelancer-card');
      let resultsFound = false;

      freelancerCards.forEach(card => {
        const skills = card.getAttribute('data-skills').toLowerCase();
        const domain = card.getAttribute('data-domain').toLowerCase();

        const matchesSkill = skillSearchInput === '' || skills.includes(skillSearchInput);
        const matchesDomain = domainFilter === '' || domain.includes(domainFilter);

        if (matchesSkill && matchesDomain) {
          card.style.display = 'flex'; // Show the card (flex for horizontal layout)
          resultsFound = true;
        } else {
          card.style.display = 'none'; // Hide the card
        }
      });

      const noResultsMessage = document.getElementById('noResultsMessage');
      if (resultsFound) {
        noResultsMessage.classList.add('hidden');
      } else {
        noResultsMessage.classList.remove('hidden');
      }
    }

    // Function to load contact info into the footer (reused from freelancing.html)
    function loadContactInfoIntoFooter() {
        if (!db) {
            console.error("Firestore not initialized. Cannot load contact info.");
            return;
        }

        const contactDocRef = doc(db, `artifacts/${currentAppId}/public/data/contactInfo`, 'mainContact');

        onSnapshot(contactDocRef, (docSnap) => {
            if (docSnap.exists()) {
                const data = docSnap.data();
                document.getElementById('footerAddress').textContent = data.address || '9/8, George Town, Prayagraj, Uttar Pradesh, Pin–211001';
                document.getElementById('footerEmail').textContent = data.email || 'info@partnerdesk.in';
                document.getElementById('footerPhone').textContent = data.phone || '+91-XXXXXXXXXX';
                document.getElementById('footerMsmeRegNo').textContent = data.msmeRegNo || 'UDYAM-UP-03-0104523';

            } else {
                // Default static info if no document exists
                document.getElementById('footerAddress').textContent = '9/8, George Town, Prayagraj, Uttar Pradesh, Pin–211001';
                document.getElementById('footerEmail').textContent = 'info@partnerdesk.in';
                document.getElementById('footerPhone').textContent = '+91-XXXXXXXXXX';
                document.getElementById('footerMsmeRegNo').textContent = 'UDYAM-UP-03-0104523';
            }
        }, (error) => {
            console.error("Error fetching contact info:", error);
            // Fallback to default static info on error
            document.getElementById('footerAddress').textContent = '9/8, George Town, Prayagraj, Uttar Pradesh, Pin–211001';
            document.getElementById('footerEmail').textContent = 'info@partnerdesk.in';
            document.getElementById('footerPhone').textContent = '+91-XXXXXXXXXX';
            document.getElementById('footerMsmeRegNo').textContent = 'UDYAM-UP-03-0104523';
        });
    }

    // Function to toggle navigation for mobile
    window.toggleNav = function() {
      const nav = document.getElementById('main-nav');
      const overlay = document.querySelector('.overlay');
      const body = document.body;

      nav.classList.toggle('active');
      overlay.classList.toggle('active');
      body.classList.toggle('no-scroll');
    }

    // Function to logout admin
    window.adminLogout = async function() {
      if (!auth) {
        console.warn("adminLogout: Firebase Auth not initialized.");
        return;
      }
      try {
        await signOut(auth);
        console.log("adminLogout: Logged out successfully.");
        // Redirect back to admin login page after logout
        window.location.href = 'admin_login.html';
      } catch (error) {
        console.error("adminLogout: Error during logout:", error.code, error.message);
        showMessage(`Logout error: ${error.message}`, 'error');
      }
    }

    // ScrollReveal animations
    ScrollReveal().reveal('.logo-title-container', {
      delay: 100,
      origin: 'left',
      distance: '30px',
      duration: 800,
      easing: 'ease-in-out',
      reset: false
    });

    ScrollReveal().reveal('.page-header h1', {
      delay: 300,
      distance: '50px',
      origin: 'top',
      duration: 1000,
      easing: 'ease-out',
      reset: false
    });

    ScrollReveal().reveal('.page-header p', {
      delay: 500,
      distance: '30px',
      origin: 'bottom',
      duration: 1000,
      easing: 'ease-out',
      reset: false
    });

    ScrollReveal().reveal('.section h2', {
      delay: 200,
      distance: '40px',
      origin: 'top',
      duration: 900,
      easing: 'ease-in-out',
      reset: false
    });

    ScrollReveal().reveal('.filter-section', {
      delay: 300,
      distance: '30px',
      origin: 'bottom',
      duration: 900,
      easing: 'ease-in-out',
      reset: false
    });

    ScrollReveal().reveal('.freelancer-card', {
      interval: 150,
      delay: 400,
      distance: '50px',
      origin: 'bottom',
      duration: 1000,
      easing: 'ease-in-out',
      reset: false
    });

    ScrollReveal().reveal('.admin-panel-container', {
      delay: 200,
      distance: '40px',
      origin: 'bottom',
      duration: 900,
      easing: 'ease-in-out',
      reset: false
    });

    ScrollReveal().reveal('footer', {
      delay: 100,
      distance: '20px',
      origin: 'bottom',
      duration: 800,
      easing: 'ease-in-out',
      reset: false
    });

    // Close nav when a nav link is clicked
    document.querySelectorAll('#main-nav a').forEach(link => {
      link.addEventListener('click', () => {
        const nav = document.getElementById('main-nav');
        if (nav.classList.contains('active')) {
          window.toggleNav();
        }
      });
    });
  </script>
</body>
</html>
